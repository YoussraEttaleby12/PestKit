(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // Utiliser AMD (RequireJS)
        define(['jquery'], factory);
    } else if (typeof exports === 'object' && typeof module !== 'undefined') {
        // Utiliser CommonJS (Node, Browserify)
        module.exports = factory(require('jquery'));
    } else {
        // Utiliser un script global (jQuery doit être chargé avant ce script)
        factory(jQuery);
    }
}(function ($) {
    function easeOutBounce(x) {
        var base = -Math.pow(2, -10 * x) + 1;
        var n1 = 5 / 4;
        var n2 = 7.5625;
        var d = n1 * n1;
        if (x < 1 / d) {
            return n2 * x * x;
        } else if (x < 2 / d) {
            return n2 * (x -= 1.5 / n1) * x + 0.75;
        } else if (x < 2.5 / d) {
            return n2 * (x -= 2.25 / n1) * x + 0.9375;
        } else {
            return n2 * (x -= 2.625 / n1) * x + 0.984375;
        }
    }

    if ($.easing) {
        $.easing.jswing = $.easing.swing;
        $.extend($.easing, {
            def: 'easeOutQuad',
            swing: function (x) {
                return $.easing[$.easing.def](x);
            },
            easeOutQuad: function (x) {
                return 1 - (1 - x) * (1 - x);
            },
            easeInOutQuad: function (x) {
                return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;
            },
            easeInCubic: function (x) {
                return x * x * x;
            },
            easeOutCubic: function (x) {
                return 1 - Math.pow(1 - x, 3);
            },
            easeInOutCubic: function (x) {
                return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;
            },
            easeInQuart: function (x) {
                return x * x * x * x;
            },
            easeOutQuart: function (x) {
                return 1 - Math.pow(1 - x, 4);
            },
            easeInOutQuart: function (x) {
                return x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;
            },
            easeInQuint: function (x) {
                return x * x * x * x * x;
            },
            easeOutQuint: function (x) {
                return 1 - Math.pow(1 - x, 5);
            },
            easeInOutQuint: function (x) {
                return x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2;
            },
            easeInSine: function (x) {
                return 1 - Math.cos(x * Math.PI / 2);
            },
            easeOutSine: function (x) {
                return Math.sin(x * Math.PI / 2);
            },
            easeInOutSine: function (x) {
                return -(Math.cos(Math.PI * x) - 1) / 2;
            },
            easeInExpo: function (x) {
                return x === 0 ? 0 : Math.pow(2, 10 * x - 10);
            },
            easeOutExpo: function (x) {
                return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);
            },
            easeInOutExpo: function (x) {
                return x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2 : (2 - Math.pow(2, -20 * x + 10)) / 2;
            },
            easeInCirc: function (x) {
                return 1 - Math.sqrt(1 - x * x);
            },
            easeOutCirc: function (x) {
                return Math.sqrt(1 - Math.pow(x - 1, 2));
            },
            easeInOutCirc: function (x) {
                return x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;
            },
            easeInElastic: function (x) {
                return x === 0 ? 0 : x === 1 ? 1 : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * 2 * Math.PI / 3);
            },
            easeOutElastic: function (x) {
                return x === 0 ? 0 : x === 1 ? 1 : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * 2 * Math.PI / 3) + 1;
            },
            easeInOutElastic: function (x) {
                return x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * 2 * Math.PI / 4.5)) / 2 : (Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * 2 * Math.PI / 4.5)) / 2 + 1;
            },
            easeInBack: function (x) {
                return 2.70158 * x * x * x - 1.70158 * x * x;
            },
            easeOutBack: function (x) {
                return 1 + 2.70158 * Math.pow(x - 1, 3) + 1.70158 * Math.pow(x - 1, 2);
            },
            easeInOutBack: function (x) {
                return x < 0.5 ? Math.pow(2 * x, 2) * (7.189819 * x - 0.75) / 2 : (Math.pow(2 * x - 2, 2) * (7.189819 * (x - 1) + 0.75) + 2) / 2;
            },
            easeInBounce: function (x) {
                return 1 - easeOutBounce(1 - x);
            },
            easeInOutBounce: function (x) {
                return x < 0.5 ? (1 - easeOutBounce(1 - 2 * x)) / 2 : (1 + easeOutBounce(2 * x - 1)) / 2;
            }
        });
    }
}));
